// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Threshold (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_rows_V_dout,
        p_src_rows_V_empty_n,
        p_src_rows_V_read,
        p_src_cols_V_dout,
        p_src_cols_V_empty_n,
        p_src_cols_V_read,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_pp0_stage0 = 46'd8;
parameter    ap_ST_fsm_state8 = 46'd16;
parameter    ap_ST_fsm_state9 = 46'd32;
parameter    ap_ST_fsm_state10 = 46'd64;
parameter    ap_ST_fsm_state11 = 46'd128;
parameter    ap_ST_fsm_state12 = 46'd256;
parameter    ap_ST_fsm_state13 = 46'd512;
parameter    ap_ST_fsm_state14 = 46'd1024;
parameter    ap_ST_fsm_state15 = 46'd2048;
parameter    ap_ST_fsm_state16 = 46'd4096;
parameter    ap_ST_fsm_state17 = 46'd8192;
parameter    ap_ST_fsm_state18 = 46'd16384;
parameter    ap_ST_fsm_state19 = 46'd32768;
parameter    ap_ST_fsm_state20 = 46'd65536;
parameter    ap_ST_fsm_state21 = 46'd131072;
parameter    ap_ST_fsm_state22 = 46'd262144;
parameter    ap_ST_fsm_state23 = 46'd524288;
parameter    ap_ST_fsm_state24 = 46'd1048576;
parameter    ap_ST_fsm_state25 = 46'd2097152;
parameter    ap_ST_fsm_state26 = 46'd4194304;
parameter    ap_ST_fsm_state27 = 46'd8388608;
parameter    ap_ST_fsm_state28 = 46'd16777216;
parameter    ap_ST_fsm_state29 = 46'd33554432;
parameter    ap_ST_fsm_state30 = 46'd67108864;
parameter    ap_ST_fsm_state31 = 46'd134217728;
parameter    ap_ST_fsm_state32 = 46'd268435456;
parameter    ap_ST_fsm_state33 = 46'd536870912;
parameter    ap_ST_fsm_state34 = 46'd1073741824;
parameter    ap_ST_fsm_state35 = 46'd2147483648;
parameter    ap_ST_fsm_state36 = 46'd4294967296;
parameter    ap_ST_fsm_state37 = 46'd8589934592;
parameter    ap_ST_fsm_state38 = 46'd17179869184;
parameter    ap_ST_fsm_state39 = 46'd34359738368;
parameter    ap_ST_fsm_state40 = 46'd68719476736;
parameter    ap_ST_fsm_state41 = 46'd137438953472;
parameter    ap_ST_fsm_state42 = 46'd274877906944;
parameter    ap_ST_fsm_state43 = 46'd549755813888;
parameter    ap_ST_fsm_state44 = 46'd1099511627776;
parameter    ap_ST_fsm_state45 = 46'd2199023255552;
parameter    ap_ST_fsm_state46 = 46'd4398046511104;
parameter    ap_ST_fsm_state47 = 46'd8796093022208;
parameter    ap_ST_fsm_state48 = 46'd17592186044416;
parameter    ap_ST_fsm_state49 = 46'd35184372088832;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_src_rows_V_dout;
input   p_src_rows_V_empty_n;
output   p_src_rows_V_read;
input  [31:0] p_src_cols_V_dout;
input   p_src_cols_V_empty_n;
output   p_src_cols_V_read;
input  [7:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_rows_V_read;
reg p_src_cols_V_read;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] hls_threshold_V;
reg    p_src_rows_V_blk_n;
reg    p_src_cols_V_blk_n;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_8_i_reg_1321;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_8_i_reg_1321_pp0_iter1_reg;
reg   [30:0] j_i_reg_302;
wire   [31:0] grp_fu_395_p2;
reg   [31:0] reg_466;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state48;
wire   [31:0] grp_fu_403_p2;
reg   [31:0] reg_472;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_407_p2;
reg   [31:0] reg_478;
reg  signed [31:0] rows_reg_1224;
reg    ap_block_state1;
reg  signed [31:0] cols_reg_1230;
wire   [8:0] i_fu_490_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_7_i_fu_545_p2;
wire    ap_CS_fsm_state3;
wire   [30:0] i_1_fu_550_p2;
reg   [30:0] i_1_reg_1316;
wire   [0:0] tmp_8_i_fu_560_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_8_i_reg_1321_pp0_iter2_reg;
wire   [30:0] j_fu_565_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_13_reg_1330;
reg   [7:0] addr_win_val_0_V_2_1_reg_1341;
wire   [0:0] tmp_51_i_fu_698_p2;
reg   [0:0] tmp_51_i_reg_1346;
wire   [0:0] tmp_49_1_i_fu_712_p2;
reg   [0:0] tmp_49_1_i_reg_1352;
wire   [0:0] tmp_51_2_i_fu_726_p2;
reg   [0:0] tmp_51_2_i_reg_1358;
wire   [0:0] tmp_31_i_fu_740_p2;
reg   [0:0] tmp_31_i_reg_1364;
wire   [0:0] icmp_fu_766_p2;
reg   [0:0] icmp_reg_1374;
wire   [0:0] sel_tmp5_fu_786_p2;
reg   [0:0] sel_tmp5_reg_1379;
wire   [1:0] m_fu_970_p2;
wire    ap_CS_fsm_state9;
wire   [31:0] tmp_10_i_fu_1004_p2;
reg   [31:0] tmp_10_i_reg_1398;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_431_p1;
reg   [31:0] tmp_11_i_reg_1403;
wire    ap_CS_fsm_state14;
wire   [8:0] threshold_tmp_fu_1014_p2;
reg   [8:0] threshold_tmp_reg_1413;
wire    ap_CS_fsm_state15;
wire   [28:0] i_op_assign_cast7_i_fu_1020_p1;
reg   [28:0] i_op_assign_cast7_i_reg_1418;
wire    ap_CS_fsm_state16;
wire   [8:0] j_1_fu_1030_p2;
reg   [8:0] j_1_reg_1426;
wire   [0:0] tmp_27_i_fu_1036_p2;
reg   [0:0] tmp_27_i_reg_1431;
wire   [0:0] exitcond_i_fu_1024_p2;
wire   [31:0] total_gray_fu_1047_p2;
reg   [31:0] total_gray_reg_1444;
wire   [28:0] tmp_32_i_fu_1219_p2;
reg   [28:0] tmp_32_i_reg_1449;
wire    ap_CS_fsm_state17;
wire   [31:0] front_pixel_count_1_fu_1073_p3;
reg   [31:0] front_pixel_count_1_reg_1454;
wire   [31:0] back_pixel_count_1_fu_1080_p3;
reg   [31:0] back_pixel_count_1_reg_1459;
wire   [31:0] front_gray_count_1_fu_1102_p3;
wire    ap_CS_fsm_state18;
wire   [31:0] back_gray_count_1_fu_1109_p3;
reg   [31:0] tmp_14_i_reg_1474;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_435_p1;
reg   [31:0] tmp_15_i_reg_1480;
wire   [31:0] grp_fu_439_p1;
reg   [31:0] tmp_16_i_reg_1486;
wire   [31:0] grp_fu_443_p1;
reg   [31:0] tmp_17_i_reg_1491;
wire   [31:0] grp_fu_447_p1;
reg   [31:0] tmp_18_i_reg_1496;
wire   [31:0] grp_fu_411_p2;
reg   [31:0] front_pixel_probabil_reg_1501;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_415_p2;
reg   [31:0] back_pixel_probabili_reg_1506;
wire   [31:0] grp_fu_419_p2;
reg   [31:0] front_gray_average_reg_1511;
wire   [31:0] grp_fu_423_p2;
reg   [31:0] back_gray_average_reg_1516;
wire   [31:0] grp_fu_427_p2;
reg   [31:0] total_gray_average_reg_1521;
wire   [31:0] grp_fu_399_p2;
reg   [31:0] tmp_23_i_reg_1527;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter2_state6;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] hist_out_V_address0;
reg    hist_out_V_ce0;
reg    hist_out_V_we0;
wire   [19:0] hist_out_V_q0;
reg   [7:0] hist_out_V_address1;
reg    hist_out_V_ce1;
reg    hist_out_V_we1;
reg   [19:0] hist_out_V_d1;
reg   [8:0] i1_i_reg_280;
wire   [0:0] exitcond2_i_fu_484_p2;
reg   [30:0] i2_i_reg_291;
wire    ap_CS_fsm_state8;
reg   [1:0] col_assign_reg_313;
wire   [0:0] exitcond3_i_fu_964_p2;
reg   [8:0] val_assign_reg_324;
wire    ap_CS_fsm_state49;
reg   [31:0] front_pixel_count_i_reg_336;
wire   [0:0] exitcond5_i_fu_1008_p2;
reg   [31:0] back_pixel_count_i_reg_348;
reg   [31:0] front_gray_count_i_reg_360;
reg   [31:0] back_gray_count_i_reg_372;
reg   [8:0] i_op_assign_reg_384;
wire   [63:0] tmp_5_i_fu_496_p1;
wire   [63:0] tmp_34_i_fu_746_p1;
wire   [63:0] tmp_38_i_fu_935_p1;
wire   [63:0] tmp_i_55_fu_990_p1;
wire   [63:0] tmp_28_i_fu_1042_p1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] tmp_12_fu_1204_p1;
wire   [0:0] tmp_11_fu_1198_p2;
reg   [19:0] p_0341_i_fu_166;
wire   [19:0] p_0341_2_be_2_i_fu_901_p3;
reg   [7:0] p_0338_i_fu_170;
wire   [7:0] p_0338_2_be_2_i_fu_732_p3;
reg   [7:0] addr_win_val_0_V_2_fu_174;
reg   [7:0] addr_win_val_0_V_1_fu_178;
wire   [7:0] addr_win_val_V_0_0_2_fu_799_p3;
reg   [7:0] addr_win_val_0_V_3_fu_182;
reg   [7:0] addr_last_V_fu_186;
reg   [19:0] hist_win_val_0_V_1_1_fu_190;
wire   [19:0] hist_win_val_0_V_1_fu_894_p3;
reg   [19:0] hist_win_val_V_0_0_i_fu_194;
wire   [19:0] hist_win_val_V_0_0_2_fu_928_p3;
reg   [19:0] hist_win_val_0_V_2_1_fu_198;
wire   [19:0] hist_win_val_0_V_2_fu_873_p3;
reg   [19:0] hist_win_val_0_V_3_1_fu_202;
wire   [19:0] hist_win_val_0_V_3_fu_853_p3;
reg   [31:0] interclass_variance_s_fu_206;
wire   [19:0] hist_win_val_V_load_s_fu_995_p3;
reg   [31:0] grp_fu_395_p0;
reg   [31:0] grp_fu_395_p1;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state45;
reg   [31:0] grp_fu_403_p0;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state42;
reg   [31:0] grp_fu_407_p0;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_431_p0;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state19;
wire   [31:0] i2_cast_i_fu_541_p1;
wire   [31:0] j_cast_i_fu_556_p1;
wire   [0:0] tmp_9_i_fu_584_p2;
wire   [0:0] tmp_21_i_fu_598_p2;
wire   [0:0] tmp_21_3_i_fu_613_p2;
wire   [0:0] tmp_3_fu_626_p2;
wire   [2:0] p_i_cast_fu_618_p3;
wire   [0:0] tmp_21_1_i_fu_603_p2;
wire   [0:0] sel_tmp1_fu_640_p2;
wire   [0:0] sel_tmp6_demorgan_fu_652_p2;
wire   [0:0] tmp_21_2_i_fu_608_p2;
wire   [0:0] sel_tmp6_fu_658_p2;
wire   [0:0] sel_tmp7_fu_664_p2;
wire   [0:0] sel_tmp2_fu_646_p2;
wire   [0:0] tmp_4_fu_678_p2;
wire   [2:0] sel_tmp3_cast_fu_670_p3;
wire   [2:0] sel_tmp_fu_632_p3;
wire   [2:0] p_2_i_fu_684_p3;
wire   [2:0] ret_V_fu_692_p2;
wire   [7:0] p_0338_2_be_i_fu_704_p3;
wire   [7:0] addr_V_1_0338_2_be_s_fu_718_p3;
wire   [1:0] tmp_1_fu_756_p4;
wire   [0:0] tmp_36_i_fu_750_p2;
wire   [0:0] sel_tmp4_fu_780_p2;
wire   [7:0] storemerge_i_fu_772_p3;
wire   [7:0] sel_tmp8_fu_792_p3;
wire   [19:0] hist_flag_V_i_fu_847_p2;
wire   [19:0] hist_w_V_i_fu_867_p2;
wire   [19:0] p_0341_2_be_i_fu_860_p3;
wire   [19:0] hist_flag_V_2_i_fu_888_p2;
wire   [19:0] hist_w_V_171_0341_2_fu_881_p3;
wire   [19:0] hist_win_val_0_V_0_fu_908_p2;
wire   [19:0] storemerge1_i_fu_914_p3;
wire   [19:0] hist_last_V_fu_841_p2;
wire   [19:0] sel_tmp9_fu_921_p3;
wire   [0:0] cond_i_fu_976_p2;
wire   [7:0] addr_win_val_V_load_s_fu_982_p3;
wire   [31:0] tmp_29_i_fu_1053_p1;
wire   [31:0] front_pixel_count_fu_1067_p2;
wire   [31:0] back_pixel_count_fu_1061_p2;
wire   [31:0] tmp_32_cast_i_fu_1087_p1;
wire   [31:0] front_gray_count_fu_1096_p2;
wire   [31:0] back_gray_count_fu_1090_p2;
wire   [31:0] interclass_variance_2_fu_1120_p1;
wire   [31:0] interclass_variance_3_fu_1138_p1;
wire   [7:0] tmp_5_fu_1124_p4;
wire   [22:0] tmp_2_fu_1134_p1;
wire   [0:0] notrhs_fu_1162_p2;
wire   [0:0] notlhs_fu_1156_p2;
wire   [7:0] tmp_7_fu_1142_p4;
wire   [22:0] tmp_6_fu_1152_p1;
wire   [0:0] notrhs1_fu_1180_p2;
wire   [0:0] notlhs1_fu_1174_p2;
wire   [0:0] tmp_9_fu_1168_p2;
wire   [0:0] tmp_s_fu_1186_p2;
wire   [0:0] tmp_8_fu_1192_p2;
wire   [0:0] tmp_10_fu_450_p2;
wire   [19:0] tmp_32_i_fu_1219_p0;
wire   [8:0] tmp_32_i_fu_1219_p1;
reg   [1:0] grp_fu_395_opcode;
reg   [45:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_138;
reg    ap_enable_state6_pp0_iter2_stage0;
reg    ap_enable_operation_171;
reg    ap_enable_state7_pp0_iter3_stage0;
reg    ap_enable_operation_178;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [28:0] tmp_32_i_fu_1219_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 46'd1;
#0 hls_threshold_V = 8'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Threshold_hist_oueOg #(
    .DataWidth( 20 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
hist_out_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(hist_out_V_address0),
    .ce0(hist_out_V_ce0),
    .we0(hist_out_V_we0),
    .d0(20'd0),
    .q0(hist_out_V_q0),
    .address1(hist_out_V_address1),
    .ce1(hist_out_V_ce1),
    .we1(hist_out_V_we1),
    .d1(hist_out_V_d1)
);

ov5640_otsu_thresfYi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresfYi_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .din1(grp_fu_395_p1),
    .opcode(grp_fu_395_opcode),
    .ce(1'b1),
    .dout(grp_fu_395_p2)
);

ov5640_otsu_thresg8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresg8j_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(back_gray_average_reg_1516),
    .din1(total_gray_average_reg_1521),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

ov5640_otsu_threshbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_threshbi_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_403_p0),
    .din1(reg_466),
    .ce(1'b1),
    .dout(grp_fu_403_p2)
);

ov5640_otsu_threshbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_threshbi_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_407_p0),
    .din1(tmp_23_i_reg_1527),
    .ce(1'b1),
    .dout(grp_fu_407_p2)
);

ov5640_otsu_thresibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresibs_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_14_i_reg_1474),
    .din1(tmp_11_i_reg_1403),
    .ce(1'b1),
    .dout(grp_fu_411_p2)
);

ov5640_otsu_thresibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresibs_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_15_i_reg_1480),
    .din1(tmp_11_i_reg_1403),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

ov5640_otsu_thresibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresibs_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_16_i_reg_1486),
    .din1(tmp_14_i_reg_1474),
    .ce(1'b1),
    .dout(grp_fu_419_p2)
);

ov5640_otsu_thresibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresibs_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_17_i_reg_1491),
    .din1(tmp_15_i_reg_1480),
    .ce(1'b1),
    .dout(grp_fu_423_p2)
);

ov5640_otsu_thresibs #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresibs_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_i_reg_1496),
    .din1(tmp_11_i_reg_1403),
    .ce(1'b1),
    .dout(grp_fu_427_p2)
);

ov5640_otsu_thresjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresjbC_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_431_p0),
    .ce(1'b1),
    .dout(grp_fu_431_p1)
);

ov5640_otsu_thresjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresjbC_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(back_pixel_count_i_reg_348),
    .ce(1'b1),
    .dout(grp_fu_435_p1)
);

ov5640_otsu_thresjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresjbC_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(front_gray_count_i_reg_360),
    .ce(1'b1),
    .dout(grp_fu_439_p1)
);

ov5640_otsu_thresjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresjbC_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(back_gray_count_i_reg_372),
    .ce(1'b1),
    .dout(grp_fu_443_p1)
);

ov5640_otsu_thresjbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
ov5640_otsu_thresjbC_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(total_gray_reg_1444),
    .ce(1'b1),
    .dout(grp_fu_447_p1)
);

ov5640_otsu_threskbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
ov5640_otsu_threskbM_U51(
    .din0(reg_466),
    .din1(interclass_variance_s_fu_206),
    .opcode(5'd2),
    .dout(tmp_10_fu_450_p2)
);

ov5640_otsu_threslbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 29 ))
ov5640_otsu_threslbW_U52(
    .din0(tmp_32_i_fu_1219_p0),
    .din1(tmp_32_i_fu_1219_p1),
    .dout(tmp_32_i_fu_1219_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state15) & (exitcond5_i_fu_1008_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_8_i_fu_560_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_7_i_fu_545_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state6)) | ((1'b1 == ap_CS_fsm_state3) & (tmp_7_i_fu_545_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter2_state6))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_7_i_fu_545_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        addr_last_V_fu_186 <= addr_win_val_0_V_3_fu_182;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        addr_last_V_fu_186 <= 8'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        addr_win_val_0_V_1_fu_178 <= addr_win_val_V_0_0_2_fu_799_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        addr_win_val_0_V_1_fu_178 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        addr_win_val_0_V_2_fu_174 <= addr_win_val_0_V_1_fu_178;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        addr_win_val_0_V_2_fu_174 <= 8'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        addr_win_val_0_V_3_fu_182 <= addr_win_val_0_V_2_fu_174;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        addr_win_val_0_V_3_fu_182 <= 8'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_i_fu_1008_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        back_gray_count_i_reg_372 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        back_gray_count_i_reg_372 <= back_gray_count_1_fu_1109_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_i_fu_1008_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        back_pixel_count_i_reg_348 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        back_pixel_count_i_reg_348 <= back_pixel_count_1_reg_1459;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_7_i_fu_545_p2 == 1'd0))) begin
        col_assign_reg_313 <= 2'd0;
    end else if (((exitcond3_i_fu_964_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        col_assign_reg_313 <= m_fu_970_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_i_fu_1008_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        front_gray_count_i_reg_360 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        front_gray_count_i_reg_360 <= front_gray_count_1_fu_1102_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_i_fu_1008_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        front_pixel_count_i_reg_336 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        front_pixel_count_i_reg_336 <= front_pixel_count_1_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1))) begin
        hist_win_val_0_V_1_1_fu_190 <= hist_win_val_0_V_1_fu_894_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        hist_win_val_0_V_1_1_fu_190 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1))) begin
        hist_win_val_0_V_2_1_fu_198 <= hist_win_val_0_V_2_fu_873_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        hist_win_val_0_V_2_1_fu_198 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1))) begin
        hist_win_val_0_V_3_1_fu_202 <= hist_win_val_0_V_3_fu_853_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        hist_win_val_0_V_3_1_fu_202 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1))) begin
        hist_win_val_V_0_0_i_fu_194 <= hist_win_val_V_0_0_2_fu_928_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        hist_win_val_V_0_0_i_fu_194 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_i_reg_280 <= 9'd0;
    end else if (((exitcond2_i_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_i_reg_280 <= i_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
        i2_i_reg_291 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i2_i_reg_291 <= i_1_reg_1316;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_i_fu_1008_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        i_op_assign_reg_384 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_op_assign_reg_384 <= j_1_reg_1426;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_fu_560_p2 == 1'd1))) begin
        j_i_reg_302 <= j_fu_565_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (tmp_7_i_fu_545_p2 == 1'd1))) begin
        j_i_reg_302 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        val_assign_reg_324 <= threshold_tmp_reg_1413;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        val_assign_reg_324 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        addr_win_val_0_V_2_1_reg_1341 <= addr_win_val_0_V_2_fu_174;
        p_0338_i_fu_170 <= p_0338_2_be_2_i_fu_732_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        back_gray_average_reg_1516 <= grp_fu_423_p2;
        back_pixel_probabili_reg_1506 <= grp_fu_415_p2;
        front_gray_average_reg_1511 <= grp_fu_419_p2;
        front_pixel_probabil_reg_1501 <= grp_fu_411_p2;
        total_gray_average_reg_1521 <= grp_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        back_pixel_count_1_reg_1459 <= back_pixel_count_1_fu_1080_p3;
        front_pixel_count_1_reg_1454 <= front_pixel_count_1_fu_1073_p3;
        tmp_32_i_reg_1449 <= tmp_32_i_fu_1219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_reg_1230 <= p_src_cols_V_dout;
        rows_reg_1224 <= p_src_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (tmp_11_fu_1198_p2 == 1'd1))) begin
        hls_threshold_V <= tmp_12_fu_1204_p1;
        interclass_variance_s_fu_206 <= reg_466;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_1316 <= i_1_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_op_assign_cast7_i_reg_1418[8 : 0] <= i_op_assign_cast7_i_fu_1020_p1[8 : 0];
        j_1_reg_1426 <= j_1_fu_1030_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        icmp_reg_1374 <= icmp_fu_766_p2;
        sel_tmp5_reg_1379 <= sel_tmp5_fu_786_p2;
        tmp_31_i_reg_1364 <= tmp_31_i_fu_740_p2;
        tmp_49_1_i_reg_1352 <= tmp_49_1_i_fu_712_p2;
        tmp_51_2_i_reg_1358 <= tmp_51_2_i_fu_726_p2;
        tmp_51_i_reg_1346 <= tmp_51_i_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1))) begin
        p_0341_i_fu_166 <= p_0341_2_be_2_i_fu_901_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state38))) begin
        reg_466 <= grp_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state41))) begin
        reg_472 <= grp_fu_403_p2;
        reg_478 <= grp_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        threshold_tmp_reg_1413 <= threshold_tmp_fu_1014_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_10_i_reg_1398 <= tmp_10_i_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_11_i_reg_1403 <= grp_fu_431_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321 == 1'd1))) begin
        tmp_13_reg_1330 <= p_src_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_14_i_reg_1474 <= grp_fu_431_p1;
        tmp_15_i_reg_1480 <= grp_fu_435_p1;
        tmp_16_i_reg_1486 <= grp_fu_439_p1;
        tmp_17_i_reg_1491 <= grp_fu_443_p1;
        tmp_18_i_reg_1496 <= grp_fu_447_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        tmp_23_i_reg_1527 <= grp_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_1024_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_27_i_reg_1431 <= tmp_27_i_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_8_i_reg_1321 <= tmp_8_i_fu_560_p2;
        tmp_8_i_reg_1321_pp0_iter1_reg <= tmp_8_i_reg_1321;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_8_i_reg_1321_pp0_iter2_reg <= tmp_8_i_reg_1321_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (exitcond_i_fu_1024_p2 == 1'd1))) begin
        total_gray_reg_1444 <= total_gray_fu_1047_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_condition_pp0_exit_iter2_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter2_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond5_i_fu_1008_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (exitcond5_i_fu_1008_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_395_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_395_opcode = 2'd0;
    end else begin
        grp_fu_395_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_395_p0 = reg_472;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_395_p0 = front_gray_average_reg_1511;
    end else begin
        grp_fu_395_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_395_p1 = reg_478;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_395_p1 = total_gray_average_reg_1521;
    end else begin
        grp_fu_395_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_403_p0 = reg_472;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_403_p0 = front_pixel_probabil_reg_1501;
    end else begin
        grp_fu_403_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_407_p0 = reg_478;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        grp_fu_407_p0 = back_pixel_probabili_reg_1506;
    end else begin
        grp_fu_407_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_431_p0 = front_pixel_count_i_reg_336;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_431_p0 = tmp_10_i_reg_1398;
    end else begin
        grp_fu_431_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        hist_out_V_address0 = tmp_28_i_fu_1042_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        hist_out_V_address0 = tmp_34_i_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        hist_out_V_address0 = tmp_5_i_fu_496_p1;
    end else begin
        hist_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        hist_out_V_address1 = tmp_i_55_fu_990_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        hist_out_V_address1 = tmp_38_i_fu_935_p1;
    end else begin
        hist_out_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        hist_out_V_ce0 = 1'b1;
    end else begin
        hist_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        hist_out_V_ce1 = 1'b1;
    end else begin
        hist_out_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        hist_out_V_d1 = hist_win_val_V_load_s_fu_995_p3;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        hist_out_V_d1 = hist_win_val_0_V_2_fu_873_p3;
    end else begin
        hist_out_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_i_fu_484_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        hist_out_V_we0 = 1'b1;
    end else begin
        hist_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond3_i_fu_964_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1)))) begin
        hist_out_V_we1 = 1'b1;
    end else begin
        hist_out_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_blk_n = p_src_cols_V_empty_n;
    end else begin
        p_src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_cols_V_read = 1'b1;
    end else begin
        p_src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_8_i_reg_1321 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_8_i_reg_1321 == 1'd1))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_blk_n = p_src_rows_V_empty_n;
    end else begin
        p_src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_src_rows_V_read = 1'b1;
    end else begin
        p_src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_i_fu_484_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_7_i_fu_545_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state9 : begin
            if (((exitcond3_i_fu_964_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (exitcond5_i_fu_1008_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (exitcond_i_fu_1024_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addr_V_1_0338_2_be_s_fu_718_p3 = ((tmp_49_1_i_fu_712_p2[0:0] === 1'b1) ? addr_win_val_0_V_2_fu_174 : p_0338_2_be_i_fu_704_p3);

assign addr_win_val_V_0_0_2_fu_799_p3 = ((sel_tmp5_fu_786_p2[0:0] === 1'b1) ? addr_last_V_fu_186 : sel_tmp8_fu_792_p3);

assign addr_win_val_V_load_s_fu_982_p3 = ((cond_i_fu_976_p2[0:0] === 1'b1) ? addr_win_val_0_V_1_fu_178 : addr_win_val_0_V_2_fu_174);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_8_i_reg_1321 == 1'd1)) | ((p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_8_i_reg_1321 == 1'd1)) | ((p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_8_i_reg_1321 == 1'd1)) | ((p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (p_src_cols_V_empty_n == 1'b0) | (p_src_rows_V_empty_n == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((p_src_data_stream_V_empty_n == 1'b0) & (tmp_8_i_reg_1321 == 1'd1));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = ((p_dst_data_stream_V_full_n == 1'b0) & (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1));
end

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_138 = (tmp_8_i_reg_1321_pp0_iter1_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_171 = (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_178 = (tmp_8_i_reg_1321_pp0_iter2_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state6_pp0_iter2_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_enable_state7_pp0_iter3_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign back_gray_count_1_fu_1109_p3 = ((tmp_27_i_reg_1431[0:0] === 1'b1) ? back_gray_count_fu_1090_p2 : back_gray_count_i_reg_372);

assign back_gray_count_fu_1090_p2 = (back_gray_count_i_reg_372 + tmp_32_cast_i_fu_1087_p1);

assign back_pixel_count_1_fu_1080_p3 = ((tmp_27_i_reg_1431[0:0] === 1'b1) ? back_pixel_count_fu_1061_p2 : back_pixel_count_i_reg_348);

assign back_pixel_count_fu_1061_p2 = (back_pixel_count_i_reg_348 + tmp_29_i_fu_1053_p1);

assign cond_i_fu_976_p2 = ((col_assign_reg_313 == 2'd0) ? 1'b1 : 1'b0);

assign exitcond2_i_fu_484_p2 = ((i1_i_reg_280 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond3_i_fu_964_p2 = ((col_assign_reg_313 == 2'd2) ? 1'b1 : 1'b0);

assign exitcond5_i_fu_1008_p2 = ((val_assign_reg_324 == 9'd256) ? 1'b1 : 1'b0);

assign exitcond_i_fu_1024_p2 = ((i_op_assign_reg_384 == 9'd256) ? 1'b1 : 1'b0);

assign front_gray_count_1_fu_1102_p3 = ((tmp_27_i_reg_1431[0:0] === 1'b1) ? front_gray_count_i_reg_360 : front_gray_count_fu_1096_p2);

assign front_gray_count_fu_1096_p2 = (front_gray_count_i_reg_360 + tmp_32_cast_i_fu_1087_p1);

assign front_pixel_count_1_fu_1073_p3 = ((tmp_27_i_reg_1431[0:0] === 1'b1) ? front_pixel_count_i_reg_336 : front_pixel_count_fu_1067_p2);

assign front_pixel_count_fu_1067_p2 = (front_pixel_count_i_reg_336 + tmp_29_i_fu_1053_p1);

assign hist_flag_V_2_i_fu_888_p2 = (20'd1 + hist_win_val_V_0_0_i_fu_194);

assign hist_flag_V_i_fu_847_p2 = (20'd1 + hist_win_val_0_V_2_1_fu_198);

assign hist_last_V_fu_841_p2 = (20'd1 + hist_win_val_0_V_3_1_fu_202);

assign hist_w_V_171_0341_2_fu_881_p3 = ((tmp_49_1_i_reg_1352[0:0] === 1'b1) ? hist_w_V_i_fu_867_p2 : p_0341_2_be_i_fu_860_p3);

assign hist_w_V_i_fu_867_p2 = (20'd1 + hist_win_val_0_V_1_1_fu_190);

assign hist_win_val_0_V_0_fu_908_p2 = (20'd1 + hist_out_V_q0);

assign hist_win_val_0_V_1_fu_894_p3 = ((tmp_51_2_i_reg_1358[0:0] === 1'b1) ? hist_flag_V_2_i_fu_888_p2 : hist_win_val_V_0_0_i_fu_194);

assign hist_win_val_0_V_2_fu_873_p3 = ((tmp_49_1_i_reg_1352[0:0] === 1'b1) ? hist_w_V_i_fu_867_p2 : hist_win_val_0_V_1_1_fu_190);

assign hist_win_val_0_V_3_fu_853_p3 = ((tmp_51_i_reg_1346[0:0] === 1'b1) ? hist_flag_V_i_fu_847_p2 : hist_win_val_0_V_2_1_fu_198);

assign hist_win_val_V_0_0_2_fu_928_p3 = ((sel_tmp5_reg_1379[0:0] === 1'b1) ? hist_last_V_fu_841_p2 : sel_tmp9_fu_921_p3);

assign hist_win_val_V_load_s_fu_995_p3 = ((cond_i_fu_976_p2[0:0] === 1'b1) ? hist_win_val_V_0_0_i_fu_194 : hist_win_val_0_V_1_1_fu_190);

assign i2_cast_i_fu_541_p1 = i2_i_reg_291;

assign i_1_fu_550_p2 = (i2_i_reg_291 + 31'd1);

assign i_fu_490_p2 = (i1_i_reg_280 + 9'd1);

assign i_op_assign_cast7_i_fu_1020_p1 = i_op_assign_reg_384;

assign icmp_fu_766_p2 = ((tmp_1_fu_756_p4 != 2'd0) ? 1'b1 : 1'b0);

assign interclass_variance_2_fu_1120_p1 = reg_466;

assign interclass_variance_3_fu_1138_p1 = interclass_variance_s_fu_206;

assign j_1_fu_1030_p2 = (i_op_assign_reg_384 + 9'd1);

assign j_cast_i_fu_556_p1 = j_i_reg_302;

assign j_fu_565_p2 = (j_i_reg_302 + 31'd1);

assign m_fu_970_p2 = (col_assign_reg_313 + 2'd1);

assign notlhs1_fu_1174_p2 = ((tmp_7_fu_1142_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_1156_p2 = ((tmp_5_fu_1124_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_1180_p2 = ((tmp_6_fu_1152_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_1162_p2 = ((tmp_2_fu_1134_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_0338_2_be_2_i_fu_732_p3 = ((tmp_51_2_i_fu_726_p2[0:0] === 1'b1) ? addr_win_val_0_V_1_fu_178 : addr_V_1_0338_2_be_s_fu_718_p3);

assign p_0338_2_be_i_fu_704_p3 = ((tmp_51_i_fu_698_p2[0:0] === 1'b1) ? addr_win_val_0_V_3_fu_182 : p_0338_i_fu_170);

assign p_0341_2_be_2_i_fu_901_p3 = ((tmp_51_2_i_reg_1358[0:0] === 1'b1) ? hist_flag_V_2_i_fu_888_p2 : hist_w_V_171_0341_2_fu_881_p3);

assign p_0341_2_be_i_fu_860_p3 = ((tmp_51_i_reg_1346[0:0] === 1'b1) ? hist_flag_V_i_fu_847_p2 : p_0341_i_fu_166);

assign p_2_i_fu_684_p3 = ((tmp_4_fu_678_p2[0:0] === 1'b1) ? sel_tmp3_cast_fu_670_p3 : sel_tmp_fu_632_p3);

assign p_dst_data_stream_V_din = ((tmp_9_i_fu_584_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_i_cast_fu_618_p3 = ((tmp_21_i_fu_598_p2[0:0] === 1'b1) ? 3'd0 : 3'd3);

assign ret_V_fu_692_p2 = (3'd1 + p_2_i_fu_684_p3);

assign sel_tmp1_fu_640_p2 = (tmp_21_i_fu_598_p2 ^ 1'd1);

assign sel_tmp2_fu_646_p2 = (tmp_21_1_i_fu_603_p2 & sel_tmp1_fu_640_p2);

assign sel_tmp3_cast_fu_670_p3 = ((sel_tmp7_fu_664_p2[0:0] === 1'b1) ? 3'd2 : 3'd1);

assign sel_tmp4_fu_780_p2 = (tmp_31_i_fu_740_p2 ^ 1'd1);

assign sel_tmp5_fu_786_p2 = (tmp_36_i_fu_750_p2 & sel_tmp4_fu_780_p2);

assign sel_tmp6_demorgan_fu_652_p2 = (tmp_21_i_fu_598_p2 | tmp_21_1_i_fu_603_p2);

assign sel_tmp6_fu_658_p2 = (sel_tmp6_demorgan_fu_652_p2 ^ 1'd1);

assign sel_tmp7_fu_664_p2 = (tmp_21_2_i_fu_608_p2 & sel_tmp6_fu_658_p2);

assign sel_tmp8_fu_792_p3 = ((tmp_31_i_fu_740_p2[0:0] === 1'b1) ? tmp_13_reg_1330 : storemerge_i_fu_772_p3);

assign sel_tmp9_fu_921_p3 = ((tmp_31_i_reg_1364[0:0] === 1'b1) ? hist_win_val_0_V_0_fu_908_p2 : storemerge1_i_fu_914_p3);

assign sel_tmp_fu_632_p3 = ((tmp_3_fu_626_p2[0:0] === 1'b1) ? p_i_cast_fu_618_p3 : 3'd4);

assign storemerge1_i_fu_914_p3 = ((icmp_reg_1374[0:0] === 1'b1) ? p_0341_2_be_2_i_fu_901_p3 : hist_win_val_0_V_2_fu_873_p3);

assign storemerge_i_fu_772_p3 = ((icmp_fu_766_p2[0:0] === 1'b1) ? p_0338_2_be_2_i_fu_732_p3 : addr_win_val_0_V_2_fu_174);

assign threshold_tmp_fu_1014_p2 = (val_assign_reg_324 + 9'd1);

assign tmp_10_i_fu_1004_p2 = ($signed(rows_reg_1224) * $signed(cols_reg_1230));

assign tmp_11_fu_1198_p2 = (tmp_8_fu_1192_p2 & tmp_10_fu_450_p2);

assign tmp_12_fu_1204_p1 = val_assign_reg_324[7:0];

assign tmp_1_fu_756_p4 = {{p_2_i_fu_684_p3[2:1]}};

assign tmp_21_1_i_fu_603_p2 = ((tmp_13_reg_1330 == addr_win_val_0_V_2_fu_174) ? 1'b1 : 1'b0);

assign tmp_21_2_i_fu_608_p2 = ((tmp_13_reg_1330 == addr_win_val_0_V_3_fu_182) ? 1'b1 : 1'b0);

assign tmp_21_3_i_fu_613_p2 = ((tmp_13_reg_1330 == addr_last_V_fu_186) ? 1'b1 : 1'b0);

assign tmp_21_i_fu_598_p2 = ((tmp_13_reg_1330 == addr_win_val_0_V_1_fu_178) ? 1'b1 : 1'b0);

assign tmp_27_i_fu_1036_p2 = ((i_op_assign_reg_384 > val_assign_reg_324) ? 1'b1 : 1'b0);

assign tmp_28_i_fu_1042_p1 = i_op_assign_reg_384;

assign tmp_29_i_fu_1053_p1 = hist_out_V_q0;

assign tmp_2_fu_1134_p1 = interclass_variance_2_fu_1120_p1[22:0];

assign tmp_31_i_fu_740_p2 = ((p_2_i_fu_684_p3 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_32_cast_i_fu_1087_p1 = tmp_32_i_reg_1449;

assign tmp_32_i_fu_1219_p0 = tmp_32_i_fu_1219_p00;

assign tmp_32_i_fu_1219_p00 = hist_out_V_q0;

assign tmp_32_i_fu_1219_p1 = i_op_assign_cast7_i_reg_1418;

assign tmp_34_i_fu_746_p1 = tmp_13_reg_1330;

assign tmp_36_i_fu_750_p2 = ((p_2_i_fu_684_p3 == 3'd3) ? 1'b1 : 1'b0);

assign tmp_38_i_fu_935_p1 = addr_win_val_0_V_2_1_reg_1341;

assign tmp_3_fu_626_p2 = (tmp_21_i_fu_598_p2 | tmp_21_3_i_fu_613_p2);

assign tmp_49_1_i_fu_712_p2 = ((ret_V_fu_692_p2 == 3'd2) ? 1'b1 : 1'b0);

assign tmp_4_fu_678_p2 = (sel_tmp7_fu_664_p2 | sel_tmp2_fu_646_p2);

assign tmp_51_2_i_fu_726_p2 = ((p_2_i_fu_684_p3 == 3'd0) ? 1'b1 : 1'b0);

assign tmp_51_i_fu_698_p2 = ((ret_V_fu_692_p2 == 3'd3) ? 1'b1 : 1'b0);

assign tmp_5_fu_1124_p4 = {{interclass_variance_2_fu_1120_p1[30:23]}};

assign tmp_5_i_fu_496_p1 = i1_i_reg_280;

assign tmp_6_fu_1152_p1 = interclass_variance_3_fu_1138_p1[22:0];

assign tmp_7_fu_1142_p4 = {{interclass_variance_3_fu_1138_p1[30:23]}};

assign tmp_7_i_fu_545_p2 = (($signed(i2_cast_i_fu_541_p1) < $signed(rows_reg_1224)) ? 1'b1 : 1'b0);

assign tmp_8_fu_1192_p2 = (tmp_s_fu_1186_p2 & tmp_9_fu_1168_p2);

assign tmp_8_i_fu_560_p2 = (($signed(j_cast_i_fu_556_p1) < $signed(cols_reg_1230)) ? 1'b1 : 1'b0);

assign tmp_9_fu_1168_p2 = (notrhs_fu_1162_p2 | notlhs_fu_1156_p2);

assign tmp_9_i_fu_584_p2 = ((tmp_13_reg_1330 > hls_threshold_V) ? 1'b1 : 1'b0);

assign tmp_i_55_fu_990_p1 = addr_win_val_V_load_s_fu_982_p3;

assign tmp_s_fu_1186_p2 = (notrhs1_fu_1180_p2 | notlhs1_fu_1174_p2);

assign total_gray_fu_1047_p2 = (front_gray_count_i_reg_360 + back_gray_count_i_reg_372);

always @ (posedge ap_clk) begin
    i_op_assign_cast7_i_reg_1418[28:9] <= 20'b00000000000000000000;
end

endmodule //Threshold
