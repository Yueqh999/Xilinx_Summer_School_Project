-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_rows_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_rows_V_empty_n : IN STD_LOGIC;
    p_src_rows_V_read : OUT STD_LOGIC;
    p_src_cols_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols_V_empty_n : IN STD_LOGIC;
    p_src_cols_V_read : OUT STD_LOGIC;
    p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_data_stream_V_empty_n : IN STD_LOGIC;
    p_src_data_stream_V_read : OUT STD_LOGIC;
    p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dst_data_stream_V_full_n : IN STD_LOGIC;
    p_dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of Threshold is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hls_threshold_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal p_src_rows_V_blk_n : STD_LOGIC;
    signal p_src_cols_V_blk_n : STD_LOGIC;
    signal p_src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_8_i_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_8_i_reg_1321_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_reg_302 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_reg_1224 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_reg_1230 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_490_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_7_i_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_550_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_1_reg_1316 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_i_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_8_i_reg_1321_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_565_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_13_reg_1330 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_2_1_reg_1341 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_i_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_i_reg_1346 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_1_i_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_1_i_reg_1352 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_2_i_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_2_i_reg_1358 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_reg_1364 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1374 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_1379 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_970_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_10_i_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_reg_1398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_reg_1403 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal threshold_tmp_fu_1014_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal threshold_tmp_reg_1413 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal i_op_assign_cast7_i_fu_1020_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_op_assign_cast7_i_reg_1418 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal j_1_fu_1030_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1426 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_i_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_i_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal total_gray_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_gray_reg_1444 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_i_fu_1219_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_32_i_reg_1449 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal front_pixel_count_1_fu_1073_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_pixel_count_1_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_pixel_count_1_fu_1080_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_pixel_count_1_reg_1459 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_gray_count_1_fu_1102_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal back_gray_count_1_fu_1109_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_reg_1474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_435_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_i_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_439_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_i_reg_1486 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_reg_1491 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_reg_1496 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_pixel_probabil_reg_1501 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_pixel_probabili_reg_1506 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_gray_average_reg_1511 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_gray_average_reg_1516 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_gray_average_reg_1521 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter2_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal hist_out_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_out_V_ce0 : STD_LOGIC;
    signal hist_out_V_we0 : STD_LOGIC;
    signal hist_out_V_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_out_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_out_V_ce1 : STD_LOGIC;
    signal hist_out_V_we1 : STD_LOGIC;
    signal hist_out_V_d1 : STD_LOGIC_VECTOR (19 downto 0);
    signal i1_i_reg_280 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_i_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i2_i_reg_291 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal col_assign_reg_313 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond3_i_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_reg_324 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal front_pixel_count_i_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond5_i_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal back_pixel_count_i_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_gray_count_i_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_gray_count_i_reg_372 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_reg_384 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_i_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_i_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_i_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_55_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_i_fu_1042_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_12_fu_1204_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0341_i_fu_166 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_0341_2_be_2_i_fu_901_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_0338_i_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0338_2_be_2_i_fu_732_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_2_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_1_fu_178 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_V_0_0_2_fu_799_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_win_val_0_V_3_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_last_V_fu_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_win_val_0_V_1_1_fu_190 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_0_V_1_fu_894_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_V_0_0_i_fu_194 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_V_0_0_2_fu_928_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_0_V_2_1_fu_198 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_0_V_2_fu_873_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_0_V_3_1_fu_202 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_0_V_3_fu_853_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal interclass_variance_s_fu_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal hist_win_val_V_load_s_fu_995_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i2_cast_i_fu_541_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast_i_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_i_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_3_i_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_cast_fu_618_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_1_i_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_2_i_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_cast_fu_670_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sel_tmp_fu_632_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_2_i_fu_684_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_fu_692_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_0338_2_be_i_fu_704_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_1_0338_2_be_s_fu_718_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_756_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_36_i_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_i_fu_772_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp8_fu_792_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal hist_flag_V_i_fu_847_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_w_V_i_fu_867_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_0341_2_be_i_fu_860_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_flag_V_2_i_fu_888_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_w_V_171_0341_2_fu_881_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_win_val_0_V_0_fu_908_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal storemerge1_i_fu_914_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal hist_last_V_fu_841_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sel_tmp9_fu_921_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal cond_i_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal addr_win_val_V_load_s_fu_982_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_i_fu_1053_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_pixel_count_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_pixel_count_fu_1061_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_i_fu_1087_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal front_gray_count_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal back_gray_count_fu_1090_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal interclass_variance_2_fu_1120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal interclass_variance_3_fu_1138_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1124_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1134_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1142_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1152_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_1168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_1192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_fu_1219_p0 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_32_i_fu_1219_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_395_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_138 : BOOLEAN;
    signal ap_enable_state6_pp0_iter2_stage0 : BOOLEAN;
    signal ap_enable_operation_171 : BOOLEAN;
    signal ap_enable_state7_pp0_iter3_stage0 : BOOLEAN;
    signal ap_enable_operation_178 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_32_i_fu_1219_p00 : STD_LOGIC_VECTOR (28 downto 0);

    component ov5640_otsu_thresfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ov5640_otsu_thresg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ov5640_otsu_threshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ov5640_otsu_thresibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ov5640_otsu_thresjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ov5640_otsu_threskbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ov5640_otsu_threslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (19 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component Threshold_hist_oueOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    hist_out_V_U : component Threshold_hist_oueOg
    generic map (
        DataWidth => 20,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hist_out_V_address0,
        ce0 => hist_out_V_ce0,
        we0 => hist_out_V_we0,
        d0 => ap_const_lv20_0,
        q0 => hist_out_V_q0,
        address1 => hist_out_V_address1,
        ce1 => hist_out_V_ce1,
        we1 => hist_out_V_we1,
        d1 => hist_out_V_d1);

    ov5640_otsu_thresfYi_U37 : component ov5640_otsu_thresfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        din1 => grp_fu_395_p1,
        opcode => grp_fu_395_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    ov5640_otsu_thresg8j_U38 : component ov5640_otsu_thresg8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => back_gray_average_reg_1516,
        din1 => total_gray_average_reg_1521,
        ce => ap_const_logic_1,
        dout => grp_fu_399_p2);

    ov5640_otsu_threshbi_U39 : component ov5640_otsu_threshbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_403_p0,
        din1 => reg_466,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);

    ov5640_otsu_threshbi_U40 : component ov5640_otsu_threshbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_407_p0,
        din1 => tmp_23_i_reg_1527,
        ce => ap_const_logic_1,
        dout => grp_fu_407_p2);

    ov5640_otsu_thresibs_U41 : component ov5640_otsu_thresibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_14_i_reg_1474,
        din1 => tmp_11_i_reg_1403,
        ce => ap_const_logic_1,
        dout => grp_fu_411_p2);

    ov5640_otsu_thresibs_U42 : component ov5640_otsu_thresibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_15_i_reg_1480,
        din1 => tmp_11_i_reg_1403,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    ov5640_otsu_thresibs_U43 : component ov5640_otsu_thresibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_16_i_reg_1486,
        din1 => tmp_14_i_reg_1474,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    ov5640_otsu_thresibs_U44 : component ov5640_otsu_thresibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_17_i_reg_1491,
        din1 => tmp_15_i_reg_1480,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    ov5640_otsu_thresibs_U45 : component ov5640_otsu_thresibs
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_i_reg_1496,
        din1 => tmp_11_i_reg_1403,
        ce => ap_const_logic_1,
        dout => grp_fu_427_p2);

    ov5640_otsu_thresjbC_U46 : component ov5640_otsu_thresjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p1);

    ov5640_otsu_thresjbC_U47 : component ov5640_otsu_thresjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => back_pixel_count_i_reg_348,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p1);

    ov5640_otsu_thresjbC_U48 : component ov5640_otsu_thresjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => front_gray_count_i_reg_360,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p1);

    ov5640_otsu_thresjbC_U49 : component ov5640_otsu_thresjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => back_gray_count_i_reg_372,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p1);

    ov5640_otsu_thresjbC_U50 : component ov5640_otsu_thresjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => total_gray_reg_1444,
        ce => ap_const_logic_1,
        dout => grp_fu_447_p1);

    ov5640_otsu_threskbM_U51 : component ov5640_otsu_threskbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_466,
        din1 => interclass_variance_s_fu_206,
        opcode => ap_const_lv5_2,
        dout => tmp_10_fu_450_p2);

    ov5640_otsu_threslbW_U52 : component ov5640_otsu_threslbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 20,
        din1_WIDTH => 9,
        dout_WIDTH => 29)
    port map (
        din0 => tmp_32_i_fu_1219_p0,
        din1 => tmp_32_i_fu_1219_p1,
        dout => tmp_32_i_fu_1219_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond5_i_fu_1008_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_i_fu_560_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_7_i_fu_545_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter2_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_7_i_fu_545_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter2_state6))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_7_i_fu_545_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    addr_last_V_fu_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then 
                addr_last_V_fu_186 <= addr_win_val_0_V_3_fu_182;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                addr_last_V_fu_186 <= ap_const_lv8_3;
            end if; 
        end if;
    end process;

    addr_win_val_0_V_1_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then 
                addr_win_val_0_V_1_fu_178 <= addr_win_val_V_0_0_2_fu_799_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                addr_win_val_0_V_1_fu_178 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    addr_win_val_0_V_2_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then 
                addr_win_val_0_V_2_fu_174 <= addr_win_val_0_V_1_fu_178;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                addr_win_val_0_V_2_fu_174 <= ap_const_lv8_1;
            end if; 
        end if;
    end process;

    addr_win_val_0_V_3_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then 
                addr_win_val_0_V_3_fu_182 <= addr_win_val_0_V_2_fu_174;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                addr_win_val_0_V_3_fu_182 <= ap_const_lv8_2;
            end if; 
        end if;
    end process;

    back_gray_count_i_reg_372_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_i_fu_1008_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                back_gray_count_i_reg_372 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                back_gray_count_i_reg_372 <= back_gray_count_1_fu_1109_p3;
            end if; 
        end if;
    end process;

    back_pixel_count_i_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_i_fu_1008_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                back_pixel_count_i_reg_348 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                back_pixel_count_i_reg_348 <= back_pixel_count_1_reg_1459;
            end if; 
        end if;
    end process;

    col_assign_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_7_i_fu_545_p2 = ap_const_lv1_0))) then 
                col_assign_reg_313 <= ap_const_lv2_0;
            elsif (((exitcond3_i_fu_964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                col_assign_reg_313 <= m_fu_970_p2;
            end if; 
        end if;
    end process;

    front_gray_count_i_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_i_fu_1008_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                front_gray_count_i_reg_360 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                front_gray_count_i_reg_360 <= front_gray_count_1_fu_1102_p3;
            end if; 
        end if;
    end process;

    front_pixel_count_i_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_i_fu_1008_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                front_pixel_count_i_reg_336 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                front_pixel_count_i_reg_336 <= front_pixel_count_1_reg_1454;
            end if; 
        end if;
    end process;

    hist_win_val_0_V_1_1_fu_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1))) then 
                hist_win_val_0_V_1_1_fu_190 <= hist_win_val_0_V_1_fu_894_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                hist_win_val_0_V_1_1_fu_190 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    hist_win_val_0_V_2_1_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1))) then 
                hist_win_val_0_V_2_1_fu_198 <= hist_win_val_0_V_2_fu_873_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                hist_win_val_0_V_2_1_fu_198 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    hist_win_val_0_V_3_1_fu_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1))) then 
                hist_win_val_0_V_3_1_fu_202 <= hist_win_val_0_V_3_fu_853_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                hist_win_val_0_V_3_1_fu_202 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    hist_win_val_V_0_0_i_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1))) then 
                hist_win_val_V_0_0_i_fu_194 <= hist_win_val_V_0_0_2_fu_928_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                hist_win_val_V_0_0_i_fu_194 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    i1_i_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_i_reg_280 <= ap_const_lv9_0;
            elsif (((exitcond2_i_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_i_reg_280 <= i_fu_490_p2;
            end if; 
        end if;
    end process;

    i2_i_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then 
                i2_i_reg_291 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i2_i_reg_291 <= i_1_reg_1316;
            end if; 
        end if;
    end process;

    i_op_assign_reg_384_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_i_fu_1008_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_op_assign_reg_384 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_op_assign_reg_384 <= j_1_reg_1426;
            end if; 
        end if;
    end process;

    j_i_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_fu_560_p2 = ap_const_lv1_1))) then 
                j_i_reg_302 <= j_fu_565_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_7_i_fu_545_p2 = ap_const_lv1_1))) then 
                j_i_reg_302 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    val_assign_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                val_assign_reg_324 <= threshold_tmp_reg_1413;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                val_assign_reg_324 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then
                addr_win_val_0_V_2_1_reg_1341 <= addr_win_val_0_V_2_fu_174;
                p_0338_i_fu_170 <= p_0338_2_be_2_i_fu_732_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                back_gray_average_reg_1516 <= grp_fu_423_p2;
                back_pixel_probabili_reg_1506 <= grp_fu_415_p2;
                front_gray_average_reg_1511 <= grp_fu_419_p2;
                front_pixel_probabil_reg_1501 <= grp_fu_411_p2;
                total_gray_average_reg_1521 <= grp_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                back_pixel_count_1_reg_1459 <= back_pixel_count_1_fu_1080_p3;
                front_pixel_count_1_reg_1454 <= front_pixel_count_1_fu_1073_p3;
                tmp_32_i_reg_1449 <= tmp_32_i_fu_1219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cols_reg_1230 <= p_src_cols_V_dout;
                rows_reg_1224 <= p_src_rows_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (tmp_11_fu_1198_p2 = ap_const_lv1_1))) then
                hls_threshold_V <= tmp_12_fu_1204_p1;
                interclass_variance_s_fu_206 <= reg_466;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_1316 <= i_1_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                    i_op_assign_cast7_i_reg_1418(8 downto 0) <= i_op_assign_cast7_i_fu_1020_p1(8 downto 0);
                j_1_reg_1426 <= j_1_fu_1030_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then
                icmp_reg_1374 <= icmp_fu_766_p2;
                sel_tmp5_reg_1379 <= sel_tmp5_fu_786_p2;
                tmp_31_i_reg_1364 <= tmp_31_i_fu_740_p2;
                tmp_49_1_i_reg_1352 <= tmp_49_1_i_fu_712_p2;
                tmp_51_2_i_reg_1358 <= tmp_51_2_i_fu_726_p2;
                tmp_51_i_reg_1346 <= tmp_51_i_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1))) then
                p_0341_i_fu_166 <= p_0341_2_be_2_i_fu_901_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_466 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state41))) then
                reg_472 <= grp_fu_403_p2;
                reg_478 <= grp_fu_407_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                threshold_tmp_reg_1413 <= threshold_tmp_fu_1014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_10_i_reg_1398 <= tmp_10_i_fu_1004_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_11_i_reg_1403 <= grp_fu_431_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321 = ap_const_lv1_1))) then
                tmp_13_reg_1330 <= p_src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_14_i_reg_1474 <= grp_fu_431_p1;
                tmp_15_i_reg_1480 <= grp_fu_435_p1;
                tmp_16_i_reg_1486 <= grp_fu_439_p1;
                tmp_17_i_reg_1491 <= grp_fu_443_p1;
                tmp_18_i_reg_1496 <= grp_fu_447_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_23_i_reg_1527 <= grp_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_1024_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                tmp_27_i_reg_1431 <= tmp_27_i_fu_1036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_8_i_reg_1321 <= tmp_8_i_fu_560_p2;
                tmp_8_i_reg_1321_pp0_iter1_reg <= tmp_8_i_reg_1321;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_8_i_reg_1321_pp0_iter2_reg <= tmp_8_i_reg_1321_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_1024_p2 = ap_const_lv1_1))) then
                total_gray_reg_1444 <= total_gray_fu_1047_p2;
            end if;
        end if;
    end process;
    i_op_assign_cast7_i_reg_1418(28 downto 9) <= "00000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, tmp_7_i_fu_545_p2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state15, ap_CS_fsm_state16, exitcond_i_fu_1024_p2, ap_block_pp0_stage0_subdone, exitcond2_i_fu_484_p2, exitcond3_i_fu_964_p2, exitcond5_i_fu_1008_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_i_fu_484_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_7_i_fu_545_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state9 => 
                if (((exitcond3_i_fu_964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond5_i_fu_1008_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (exitcond_i_fu_1024_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    addr_V_1_0338_2_be_s_fu_718_p3 <= 
        addr_win_val_0_V_2_fu_174 when (tmp_49_1_i_fu_712_p2(0) = '1') else 
        p_0338_2_be_i_fu_704_p3;
    addr_win_val_V_0_0_2_fu_799_p3 <= 
        addr_last_V_fu_186 when (sel_tmp5_fu_786_p2(0) = '1') else 
        sel_tmp8_fu_792_p3;
    addr_win_val_V_load_s_fu_982_p3 <= 
        addr_win_val_0_V_1_fu_178 when (cond_i_fu_976_p2(0) = '1') else 
        addr_win_val_0_V_2_fu_174;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state39 <= ap_CS_fsm(35);
    ap_CS_fsm_state41 <= ap_CS_fsm(37);
    ap_CS_fsm_state42 <= ap_CS_fsm(38);
    ap_CS_fsm_state44 <= ap_CS_fsm(40);
    ap_CS_fsm_state45 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(45);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(5);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, tmp_8_i_reg_1321, ap_enable_reg_pp0_iter2, tmp_8_i_reg_1321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_i_reg_1321 = ap_const_lv1_1)) or ((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, tmp_8_i_reg_1321, ap_enable_reg_pp0_iter2, tmp_8_i_reg_1321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_i_reg_1321 = ap_const_lv1_1)) or ((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(p_src_data_stream_V_empty_n, p_dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, tmp_8_i_reg_1321, ap_enable_reg_pp0_iter2, tmp_8_i_reg_1321_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((p_src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_8_i_reg_1321 = ap_const_lv1_1)) or ((p_dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_src_rows_V_empty_n, p_src_cols_V_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(p_src_data_stream_V_empty_n, tmp_8_i_reg_1321)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((p_src_data_stream_V_empty_n = ap_const_logic_0) and (tmp_8_i_reg_1321 = ap_const_lv1_1));
    end process;


    ap_block_state6_pp0_stage0_iter2_assign_proc : process(p_dst_data_stream_V_full_n, tmp_8_i_reg_1321_pp0_iter1_reg)
    begin
                ap_block_state6_pp0_stage0_iter2 <= ((p_dst_data_stream_V_full_n = ap_const_logic_0) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter2_state6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter2_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter2_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state15, exitcond5_i_fu_1008_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond5_i_fu_1008_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_138_assign_proc : process(tmp_8_i_reg_1321_pp0_iter1_reg)
    begin
                ap_enable_operation_138 <= (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_171_assign_proc : process(tmp_8_i_reg_1321_pp0_iter2_reg)
    begin
                ap_enable_operation_171 <= (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_178_assign_proc : process(tmp_8_i_reg_1321_pp0_iter2_reg)
    begin
                ap_enable_operation_178 <= (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state6_pp0_iter2_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2)
    begin
                ap_enable_state6_pp0_iter2_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_enable_state7_pp0_iter3_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3)
    begin
                ap_enable_state7_pp0_iter3_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, exitcond5_i_fu_1008_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (exitcond5_i_fu_1008_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    back_gray_count_1_fu_1109_p3 <= 
        back_gray_count_fu_1090_p2 when (tmp_27_i_reg_1431(0) = '1') else 
        back_gray_count_i_reg_372;
    back_gray_count_fu_1090_p2 <= std_logic_vector(unsigned(back_gray_count_i_reg_372) + unsigned(tmp_32_cast_i_fu_1087_p1));
    back_pixel_count_1_fu_1080_p3 <= 
        back_pixel_count_fu_1061_p2 when (tmp_27_i_reg_1431(0) = '1') else 
        back_pixel_count_i_reg_348;
    back_pixel_count_fu_1061_p2 <= std_logic_vector(unsigned(back_pixel_count_i_reg_348) + unsigned(tmp_29_i_fu_1053_p1));
    cond_i_fu_976_p2 <= "1" when (col_assign_reg_313 = ap_const_lv2_0) else "0";
    exitcond2_i_fu_484_p2 <= "1" when (i1_i_reg_280 = ap_const_lv9_100) else "0";
    exitcond3_i_fu_964_p2 <= "1" when (col_assign_reg_313 = ap_const_lv2_2) else "0";
    exitcond5_i_fu_1008_p2 <= "1" when (val_assign_reg_324 = ap_const_lv9_100) else "0";
    exitcond_i_fu_1024_p2 <= "1" when (i_op_assign_reg_384 = ap_const_lv9_100) else "0";
    front_gray_count_1_fu_1102_p3 <= 
        front_gray_count_i_reg_360 when (tmp_27_i_reg_1431(0) = '1') else 
        front_gray_count_fu_1096_p2;
    front_gray_count_fu_1096_p2 <= std_logic_vector(unsigned(front_gray_count_i_reg_360) + unsigned(tmp_32_cast_i_fu_1087_p1));
    front_pixel_count_1_fu_1073_p3 <= 
        front_pixel_count_i_reg_336 when (tmp_27_i_reg_1431(0) = '1') else 
        front_pixel_count_fu_1067_p2;
    front_pixel_count_fu_1067_p2 <= std_logic_vector(unsigned(front_pixel_count_i_reg_336) + unsigned(tmp_29_i_fu_1053_p1));

    grp_fu_395_opcode_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_395_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_395_opcode <= ap_const_lv2_0;
        else 
            grp_fu_395_opcode <= "XX";
        end if; 
    end process;


    grp_fu_395_p0_assign_proc : process(reg_472, front_gray_average_reg_1511, ap_CS_fsm_state35, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_395_p0 <= reg_472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_395_p0 <= front_gray_average_reg_1511;
        else 
            grp_fu_395_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p1_assign_proc : process(reg_478, total_gray_average_reg_1521, ap_CS_fsm_state35, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_395_p1 <= reg_478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_395_p1 <= total_gray_average_reg_1521;
        else 
            grp_fu_395_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_403_p0_assign_proc : process(reg_472, front_pixel_probabil_reg_1501, ap_CS_fsm_state39, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_403_p0 <= reg_472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_403_p0 <= front_pixel_probabil_reg_1501;
        else 
            grp_fu_403_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_407_p0_assign_proc : process(reg_478, back_pixel_probabili_reg_1506, ap_CS_fsm_state39, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_407_p0 <= reg_478;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_407_p0 <= back_pixel_probabili_reg_1506;
        else 
            grp_fu_407_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(tmp_10_i_reg_1398, front_pixel_count_i_reg_336, ap_CS_fsm_state11, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_431_p0 <= front_pixel_count_i_reg_336;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_431_p0 <= tmp_10_i_reg_1398;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hist_flag_V_2_i_fu_888_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(hist_win_val_V_0_0_i_fu_194));
    hist_flag_V_i_fu_847_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(hist_win_val_0_V_2_1_fu_198));
    hist_last_V_fu_841_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(hist_win_val_0_V_3_1_fu_202));

    hist_out_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_CS_fsm_state16, tmp_5_i_fu_496_p1, tmp_34_i_fu_746_p1, tmp_28_i_fu_1042_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hist_out_V_address0 <= tmp_28_i_fu_1042_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hist_out_V_address0 <= tmp_34_i_fu_746_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            hist_out_V_address0 <= tmp_5_i_fu_496_p1(8 - 1 downto 0);
        else 
            hist_out_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    hist_out_V_address1_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state9, ap_enable_reg_pp0_iter3, tmp_38_i_fu_935_p1, tmp_i_55_fu_990_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hist_out_V_address1 <= tmp_i_55_fu_990_p1(8 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hist_out_V_address1 <= tmp_38_i_fu_935_p1(8 - 1 downto 0);
        else 
            hist_out_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    hist_out_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_block_pp0_stage0_11001, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            hist_out_V_ce0 <= ap_const_logic_1;
        else 
            hist_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    hist_out_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_state9, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            hist_out_V_ce1 <= ap_const_logic_1;
        else 
            hist_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    hist_out_V_d1_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state9, ap_enable_reg_pp0_iter3, hist_win_val_0_V_2_fu_873_p3, hist_win_val_V_load_s_fu_995_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            hist_out_V_d1 <= hist_win_val_V_load_s_fu_995_p3;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            hist_out_V_d1 <= hist_win_val_0_V_2_fu_873_p3;
        else 
            hist_out_V_d1 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    hist_out_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond2_i_fu_484_p2)
    begin
        if (((exitcond2_i_fu_484_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            hist_out_V_we0 <= ap_const_logic_1;
        else 
            hist_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    hist_out_V_we1_assign_proc : process(ap_block_pp0_stage0_11001, tmp_8_i_reg_1321_pp0_iter2_reg, ap_CS_fsm_state9, ap_enable_reg_pp0_iter3, exitcond3_i_fu_964_p2)
    begin
        if ((((exitcond3_i_fu_964_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter2_reg = ap_const_lv1_1)))) then 
            hist_out_V_we1 <= ap_const_logic_1;
        else 
            hist_out_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    hist_w_V_171_0341_2_fu_881_p3 <= 
        hist_w_V_i_fu_867_p2 when (tmp_49_1_i_reg_1352(0) = '1') else 
        p_0341_2_be_i_fu_860_p3;
    hist_w_V_i_fu_867_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(hist_win_val_0_V_1_1_fu_190));
    hist_win_val_0_V_0_fu_908_p2 <= std_logic_vector(unsigned(ap_const_lv20_1) + unsigned(hist_out_V_q0));
    hist_win_val_0_V_1_fu_894_p3 <= 
        hist_flag_V_2_i_fu_888_p2 when (tmp_51_2_i_reg_1358(0) = '1') else 
        hist_win_val_V_0_0_i_fu_194;
    hist_win_val_0_V_2_fu_873_p3 <= 
        hist_w_V_i_fu_867_p2 when (tmp_49_1_i_reg_1352(0) = '1') else 
        hist_win_val_0_V_1_1_fu_190;
    hist_win_val_0_V_3_fu_853_p3 <= 
        hist_flag_V_i_fu_847_p2 when (tmp_51_i_reg_1346(0) = '1') else 
        hist_win_val_0_V_2_1_fu_198;
    hist_win_val_V_0_0_2_fu_928_p3 <= 
        hist_last_V_fu_841_p2 when (sel_tmp5_reg_1379(0) = '1') else 
        sel_tmp9_fu_921_p3;
    hist_win_val_V_load_s_fu_995_p3 <= 
        hist_win_val_V_0_0_i_fu_194 when (cond_i_fu_976_p2(0) = '1') else 
        hist_win_val_0_V_1_1_fu_190;
    i2_cast_i_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_i_reg_291),32));
    i_1_fu_550_p2 <= std_logic_vector(unsigned(i2_i_reg_291) + unsigned(ap_const_lv31_1));
    i_fu_490_p2 <= std_logic_vector(unsigned(i1_i_reg_280) + unsigned(ap_const_lv9_1));
    i_op_assign_cast7_i_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_384),29));
    icmp_fu_766_p2 <= "0" when (tmp_1_fu_756_p4 = ap_const_lv2_0) else "1";
    interclass_variance_2_fu_1120_p1 <= reg_466;
    interclass_variance_3_fu_1138_p1 <= interclass_variance_s_fu_206;
    j_1_fu_1030_p2 <= std_logic_vector(unsigned(i_op_assign_reg_384) + unsigned(ap_const_lv9_1));
    j_cast_i_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_reg_302),32));
    j_fu_565_p2 <= std_logic_vector(unsigned(j_i_reg_302) + unsigned(ap_const_lv31_1));
    m_fu_970_p2 <= std_logic_vector(unsigned(col_assign_reg_313) + unsigned(ap_const_lv2_1));
    notlhs1_fu_1174_p2 <= "0" when (tmp_7_fu_1142_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_1156_p2 <= "0" when (tmp_5_fu_1124_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_1180_p2 <= "1" when (tmp_6_fu_1152_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_1162_p2 <= "1" when (tmp_2_fu_1134_p1 = ap_const_lv23_0) else "0";
    p_0338_2_be_2_i_fu_732_p3 <= 
        addr_win_val_0_V_1_fu_178 when (tmp_51_2_i_fu_726_p2(0) = '1') else 
        addr_V_1_0338_2_be_s_fu_718_p3;
    p_0338_2_be_i_fu_704_p3 <= 
        addr_win_val_0_V_3_fu_182 when (tmp_51_i_fu_698_p2(0) = '1') else 
        p_0338_i_fu_170;
    p_0341_2_be_2_i_fu_901_p3 <= 
        hist_flag_V_2_i_fu_888_p2 when (tmp_51_2_i_reg_1358(0) = '1') else 
        hist_w_V_171_0341_2_fu_881_p3;
    p_0341_2_be_i_fu_860_p3 <= 
        hist_flag_V_i_fu_847_p2 when (tmp_51_i_reg_1346(0) = '1') else 
        p_0341_i_fu_166;
    p_2_i_fu_684_p3 <= 
        sel_tmp3_cast_fu_670_p3 when (tmp_4_fu_678_p2(0) = '1') else 
        sel_tmp_fu_632_p3;

    p_dst_data_stream_V_blk_n_assign_proc : process(p_dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_8_i_reg_1321_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_dst_data_stream_V_blk_n <= p_dst_data_stream_V_full_n;
        else 
            p_dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_dst_data_stream_V_din <= 
        ap_const_lv8_FF when (tmp_9_i_fu_584_p2(0) = '1') else 
        ap_const_lv8_0;

    p_dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_8_i_reg_1321_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321_pp0_iter1_reg = ap_const_lv1_1))) then 
            p_dst_data_stream_V_write <= ap_const_logic_1;
        else 
            p_dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_i_cast_fu_618_p3 <= 
        ap_const_lv3_0 when (tmp_21_i_fu_598_p2(0) = '1') else 
        ap_const_lv3_3;

    p_src_cols_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_V_blk_n <= p_src_cols_V_empty_n;
        else 
            p_src_cols_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_cols_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_cols_V_read <= ap_const_logic_1;
        else 
            p_src_cols_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_data_stream_V_blk_n_assign_proc : process(p_src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_8_i_reg_1321)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_8_i_reg_1321 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_src_data_stream_V_blk_n <= p_src_data_stream_V_empty_n;
        else 
            p_src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_8_i_reg_1321, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_8_i_reg_1321 = ap_const_lv1_1))) then 
            p_src_data_stream_V_read <= ap_const_logic_1;
        else 
            p_src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    p_src_rows_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_V_blk_n <= p_src_rows_V_empty_n;
        else 
            p_src_rows_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_src_rows_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_src_rows_V_empty_n, p_src_cols_V_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (p_src_cols_V_empty_n = ap_const_logic_0) or (p_src_rows_V_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_src_rows_V_read <= ap_const_logic_1;
        else 
            p_src_rows_V_read <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(p_2_i_fu_684_p3));
    sel_tmp1_fu_640_p2 <= (tmp_21_i_fu_598_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_646_p2 <= (tmp_21_1_i_fu_603_p2 and sel_tmp1_fu_640_p2);
    sel_tmp3_cast_fu_670_p3 <= 
        ap_const_lv3_2 when (sel_tmp7_fu_664_p2(0) = '1') else 
        ap_const_lv3_1;
    sel_tmp4_fu_780_p2 <= (tmp_31_i_fu_740_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_786_p2 <= (tmp_36_i_fu_750_p2 and sel_tmp4_fu_780_p2);
    sel_tmp6_demorgan_fu_652_p2 <= (tmp_21_i_fu_598_p2 or tmp_21_1_i_fu_603_p2);
    sel_tmp6_fu_658_p2 <= (sel_tmp6_demorgan_fu_652_p2 xor ap_const_lv1_1);
    sel_tmp7_fu_664_p2 <= (tmp_21_2_i_fu_608_p2 and sel_tmp6_fu_658_p2);
    sel_tmp8_fu_792_p3 <= 
        tmp_13_reg_1330 when (tmp_31_i_fu_740_p2(0) = '1') else 
        storemerge_i_fu_772_p3;
    sel_tmp9_fu_921_p3 <= 
        hist_win_val_0_V_0_fu_908_p2 when (tmp_31_i_reg_1364(0) = '1') else 
        storemerge1_i_fu_914_p3;
    sel_tmp_fu_632_p3 <= 
        p_i_cast_fu_618_p3 when (tmp_3_fu_626_p2(0) = '1') else 
        ap_const_lv3_4;
    storemerge1_i_fu_914_p3 <= 
        p_0341_2_be_2_i_fu_901_p3 when (icmp_reg_1374(0) = '1') else 
        hist_win_val_0_V_2_fu_873_p3;
    storemerge_i_fu_772_p3 <= 
        p_0338_2_be_2_i_fu_732_p3 when (icmp_fu_766_p2(0) = '1') else 
        addr_win_val_0_V_2_fu_174;
    threshold_tmp_fu_1014_p2 <= std_logic_vector(unsigned(val_assign_reg_324) + unsigned(ap_const_lv9_1));
    tmp_10_i_fu_1004_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(rows_reg_1224) * signed(cols_reg_1230))), 32));
    tmp_11_fu_1198_p2 <= (tmp_8_fu_1192_p2 and tmp_10_fu_450_p2);
    tmp_12_fu_1204_p1 <= val_assign_reg_324(8 - 1 downto 0);
    tmp_1_fu_756_p4 <= p_2_i_fu_684_p3(2 downto 1);
    tmp_21_1_i_fu_603_p2 <= "1" when (tmp_13_reg_1330 = addr_win_val_0_V_2_fu_174) else "0";
    tmp_21_2_i_fu_608_p2 <= "1" when (tmp_13_reg_1330 = addr_win_val_0_V_3_fu_182) else "0";
    tmp_21_3_i_fu_613_p2 <= "1" when (tmp_13_reg_1330 = addr_last_V_fu_186) else "0";
    tmp_21_i_fu_598_p2 <= "1" when (tmp_13_reg_1330 = addr_win_val_0_V_1_fu_178) else "0";
    tmp_27_i_fu_1036_p2 <= "1" when (unsigned(i_op_assign_reg_384) > unsigned(val_assign_reg_324)) else "0";
    tmp_28_i_fu_1042_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_op_assign_reg_384),64));
    tmp_29_i_fu_1053_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hist_out_V_q0),32));
    tmp_2_fu_1134_p1 <= interclass_variance_2_fu_1120_p1(23 - 1 downto 0);
    tmp_31_i_fu_740_p2 <= "1" when (p_2_i_fu_684_p3 = ap_const_lv3_4) else "0";
    tmp_32_cast_i_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_i_reg_1449),32));
    tmp_32_i_fu_1219_p0 <= tmp_32_i_fu_1219_p00(20 - 1 downto 0);
    tmp_32_i_fu_1219_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hist_out_V_q0),29));
    tmp_32_i_fu_1219_p1 <= i_op_assign_cast7_i_reg_1418(9 - 1 downto 0);
    tmp_34_i_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1330),64));
    tmp_36_i_fu_750_p2 <= "1" when (p_2_i_fu_684_p3 = ap_const_lv3_3) else "0";
    tmp_38_i_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_win_val_0_V_2_1_reg_1341),64));
    tmp_3_fu_626_p2 <= (tmp_21_i_fu_598_p2 or tmp_21_3_i_fu_613_p2);
    tmp_49_1_i_fu_712_p2 <= "1" when (ret_V_fu_692_p2 = ap_const_lv3_2) else "0";
    tmp_4_fu_678_p2 <= (sel_tmp7_fu_664_p2 or sel_tmp2_fu_646_p2);
    tmp_51_2_i_fu_726_p2 <= "1" when (p_2_i_fu_684_p3 = ap_const_lv3_0) else "0";
    tmp_51_i_fu_698_p2 <= "1" when (ret_V_fu_692_p2 = ap_const_lv3_3) else "0";
    tmp_5_fu_1124_p4 <= interclass_variance_2_fu_1120_p1(30 downto 23);
    tmp_5_i_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_i_reg_280),64));
    tmp_6_fu_1152_p1 <= interclass_variance_3_fu_1138_p1(23 - 1 downto 0);
    tmp_7_fu_1142_p4 <= interclass_variance_3_fu_1138_p1(30 downto 23);
    tmp_7_i_fu_545_p2 <= "1" when (signed(i2_cast_i_fu_541_p1) < signed(rows_reg_1224)) else "0";
    tmp_8_fu_1192_p2 <= (tmp_s_fu_1186_p2 and tmp_9_fu_1168_p2);
    tmp_8_i_fu_560_p2 <= "1" when (signed(j_cast_i_fu_556_p1) < signed(cols_reg_1230)) else "0";
    tmp_9_fu_1168_p2 <= (notrhs_fu_1162_p2 or notlhs_fu_1156_p2);
    tmp_9_i_fu_584_p2 <= "1" when (unsigned(tmp_13_reg_1330) > unsigned(hls_threshold_V)) else "0";
    tmp_i_55_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addr_win_val_V_load_s_fu_982_p3),64));
    tmp_s_fu_1186_p2 <= (notrhs1_fu_1180_p2 or notlhs1_fu_1174_p2);
    total_gray_fu_1047_p2 <= std_logic_vector(unsigned(front_gray_count_i_reg_360) + unsigned(back_gray_count_i_reg_372));
end behav;
